// Servi√ßo para integra√ß√£o com Google Gemini AI
// Respostas inteligentes para perguntas da comunidade sobre qualidade do ar

import { GoogleGenerativeAI } from '@google/generative-ai';
import config from '../config/environment';

export interface GeminiConfig {
  apiKey: string;
  model: string;
}

export interface AIResponse {
  id: string;
  question: string;
  answer: string;
  confidence: number; // 0-1
  sources: string[];
  timestamp: string;
  isAI: boolean;
  author: {
    name: string;
    avatar: string;
    isAI: boolean;
  };
  tags: string[];
  helpful: number;
  notHelpful: number;
}

export interface CommunityQuestion {
  id: string;
  title: string;
  content: string;
  author: {
    name: string;
    avatar: string;
    level: number;
  };
  timestamp: string;
  tags: string[];
  location?: {
    city: string;
    state: string;
  };
  aqi?: number;
  responses: AIResponse[];
  likes: number;
  views: number;
}

class GeminiAIService {
  private genAI: GoogleGenerativeAI;
  private model: any;
  private config: GeminiConfig;

  constructor(config: GeminiConfig) {
    this.config = config;
    this.genAI = new GoogleGenerativeAI(config.apiKey);
    this.model = this.genAI.getGenerativeModel({ model: config.model });
  }

  /**
   * Gera resposta da IA para uma pergunta da comunidade
   */
  async generateAIResponse(question: CommunityQuestion): Promise<AIResponse> {
    try {
      console.log('ü§ñ Gerando resposta da IA para:', question.title);
      
      // Verificar se a chave da API est√° configurada
      if (!this.config.apiKey || this.config.apiKey === 'AIzaSyBvQvQvQvQvQvQvQvQvQvQvQvQvQvQvQvQ') {
        console.warn('‚ö†Ô∏è Chave da API do Gemini n√£o configurada, usando resposta simulada');
        return this.generateFallbackResponse(question);
      }
      
      // Criar prompt contextualizado para qualidade do ar
      const prompt = this.createContextualPrompt(question);
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Processar resposta da IA
      const aiResponse = this.processAIResponse(question, text);
      
      console.log('‚úÖ Resposta da IA gerada com sucesso');
      return aiResponse;
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar resposta da IA:', error);
      
      // Verificar se √© erro de chave inv√°lida
      if (error instanceof Error && error.message.includes('API key not valid')) {
        console.error('üîë Chave da API do Gemini inv√°lida. Verifique a configura√ß√£o.');
        return this.generateAPIKeyErrorResponse(question);
      }
      
      // Fallback para resposta simulada
      return this.generateFallbackResponse(question);
    }
  }

  /**
   * Cria prompt contextualizado baseado na pergunta
   */
  private createContextualPrompt(question: CommunityQuestion): string {
    const context = `
Voc√™ √© um especialista em qualidade do ar e sa√∫de ambiental, especializado em Mato Grosso, Brasil.
Responda de forma clara, cient√≠fica e √∫til para a comunidade.

CONTEXTO:
- Localiza√ß√£o: ${question.location?.city || 'Cuiab√°'}, ${question.location?.state || 'MT'}
- AQI atual: ${question.aqi || 'N/A'}
- Tags: ${question.tags.join(', ')}

PERGUNTA: ${question.title}
${question.content}

INSTRU√á√ïES:
1. Responda em portugu√™s brasileiro
2. Seja espec√≠fico sobre Mato Grosso quando relevante
3. Inclua dados cient√≠ficos quando poss√≠vel
4. Sugira a√ß√µes pr√°ticas
5. Mencione fontes confi√°veis (NASA, OMS, INPE)
6. Seja emp√°tico e encorajador
7. Limite a resposta a 3-4 par√°grafos
8. Inclua emojis apropriados

RESPOSTA:
`;

    return context;
  }

  /**
   * Processa a resposta da IA
   */
  private processAIResponse(question: CommunityQuestion, rawResponse: string): AIResponse {
    const responseId = `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Extrair tags da resposta
    const tags = this.extractTags(rawResponse);
    
    // Calcular confian√ßa baseada no conte√∫do
    const confidence = this.calculateConfidence(rawResponse, question);
    
    // Extrair fontes mencionadas
    const sources = this.extractSources(rawResponse);
    
    return {
      id: responseId,
      question: question.title,
      answer: rawResponse,
      confidence,
      sources,
      timestamp: new Date().toISOString(),
      isAI: true,
      author: {
        name: 'AirMetrics AI',
        avatar: 'ü§ñ',
        isAI: true
      },
      tags,
      helpful: 0,
      notHelpful: 0
    };
  }

  /**
   * Extrai tags da resposta
   */
  private extractTags(response: string): string[] {
    const commonTags = [
      'qualidade do ar', 'AQI', 'polui√ß√£o', 'queimadas', 'sa√∫de',
      'Mato Grosso', 'Cuiab√°', 'preven√ß√£o', 'recomenda√ß√µes',
      'PM2.5', 'PM10', 'oz√¥nio', 'NO2', 'monitoramento'
    ];
    
    const foundTags = commonTags.filter(tag => 
      response.toLowerCase().includes(tag.toLowerCase())
    );
    
    return foundTags.slice(0, 5); // M√°ximo 5 tags
  }

  /**
   * Calcula confian√ßa da resposta
   */
  private calculateConfidence(response: string, question: CommunityQuestion): number {
    let confidence = 0.7; // Base
    
    // Aumentar confian√ßa se menciona fontes cient√≠ficas
    if (response.includes('NASA') || response.includes('OMS') || response.includes('INPE')) {
      confidence += 0.1;
    }
    
    // Aumentar confian√ßa se menciona dados espec√≠ficos
    if (response.includes('AQI') || response.includes('PM2.5') || response.includes('Œºg/m¬≥')) {
      confidence += 0.1;
    }
    
    // Aumentar confian√ßa se menciona Mato Grosso
    if (response.includes('Mato Grosso') || response.includes('Cuiab√°')) {
      confidence += 0.05;
    }
    
    // Aumentar confian√ßa se sugere a√ß√µes pr√°ticas
    if (response.includes('recomendo') || response.includes('sugiro') || response.includes('deve')) {
      confidence += 0.05;
    }
    
    return Math.min(confidence, 1.0);
  }

  /**
   * Extrai fontes mencionadas na resposta
   */
  private extractSources(response: string): string[] {
    const sources: string[] = [];
    
    if (response.includes('NASA')) sources.push('NASA EarthData');
    if (response.includes('OMS')) sources.push('Organiza√ß√£o Mundial da Sa√∫de');
    if (response.includes('INPE')) sources.push('Instituto Nacional de Pesquisas Espaciais');
    if (response.includes('CETESB')) sources.push('CETESB');
    if (response.includes('AirNow')) sources.push('AirNow');
    
    return sources;
  }

  /**
   * Gera resposta de fallback quando a IA falha
   */
  private generateFallbackResponse(question: CommunityQuestion): AIResponse {
    const fallbackAnswers = [
      "Desculpe, n√£o consegui processar sua pergunta no momento. Recomendo consultar os dados de qualidade do ar em tempo real no aplicativo e seguir as recomenda√ß√µes de sa√∫de p√∫blica. üåç",
      "Estou com dificuldades t√©cnicas para responder sua pergunta. Sugiro verificar as informa√ß√µes mais recentes sobre qualidade do ar na sua regi√£o atrav√©s dos dados do AirMetrics. üìä",
      "N√£o consegui gerar uma resposta adequada agora. Consulte a comunidade ou os especialistas locais para informa√ß√µes mais espec√≠ficas sobre sua pergunta. üë•"
    ];
    
    const randomAnswer = fallbackAnswers[Math.floor(Math.random() * fallbackAnswers.length)];
    
    return {
      id: `ai_fallback_${Date.now()}`,
      question: question.title,
      answer: randomAnswer,
      confidence: 0.3,
      sources: [],
      timestamp: new Date().toISOString(),
      isAI: true,
      author: {
        name: 'AirMetrics AI',
        avatar: 'ü§ñ',
        isAI: true
      },
      tags: ['erro', 'fallback'],
      helpful: 0,
      notHelpful: 0
    };
  }

  /**
   * Gera resposta espec√≠fica para erro de chave de API
   */
  private generateAPIKeyErrorResponse(question: CommunityQuestion): AIResponse {
    return {
      id: `ai_apikey_error_${Date.now()}`,
      question: question.title,
      answer: "üîë A chave da API do Gemini AI n√£o est√° configurada corretamente. Por favor, configure a vari√°vel de ambiente GOOGLE_GEMINI_API_KEY com uma chave v√°lida. Enquanto isso, voc√™ pode consultar os dados de qualidade do ar dispon√≠veis no aplicativo ou fazer sua pergunta para a comunidade! üåç",
      confidence: 0.1,
      sources: ['AirMetrics Support'],
      timestamp: new Date().toISOString(),
      isAI: true,
      author: {
        name: 'AirMetrics AI',
        avatar: 'üîß',
        isAI: true
      },
      tags: ['erro', 'configura√ß√£o', 'api-key'],
      helpful: 0,
      notHelpful: 0
    };
  }

  /**
   * Gera sugest√µes de perguntas para a comunidade
   */
  async generateQuestionSuggestions(): Promise<string[]> {
    const suggestions = [
      "Como a qualidade do ar em Cuiab√° afeta minha sa√∫de?",
      "Quais s√£o os principais poluentes em Mato Grosso?",
      "Como me proteger durante a temporada de queimadas?",
      "O que significa AQI e como interpretar os valores?",
      "Existe rela√ß√£o entre queimadas e problemas respirat√≥rios?",
      "Como monitorar a qualidade do ar em casa?",
      "Quais atividades evitar quando o AQI est√° alto?",
      "Como as queimadas afetam o ecossistema local?",
      "Existe previs√£o de melhoria na qualidade do ar?",
      "Quais s√£o os grupos de risco para polui√ß√£o do ar?"
    ];
    
    // Retornar 5 sugest√µes aleat√≥rias
    return suggestions.sort(() => 0.5 - Math.random()).slice(0, 5);
  }

  /**
   * Analisa o sentimento de uma pergunta
   */
  analyzeQuestionSentiment(question: string): 'positive' | 'negative' | 'neutral' {
    const positiveWords = ['bom', 'melhor', '√≥timo', 'excelente', 'gratid√£o', 'obrigado'];
    const negativeWords = ['ruim', 'p√©ssimo', 'terr√≠vel', 'preocupado', 'medo', 'perigoso'];
    
    const lowerQuestion = question.toLowerCase();
    const positiveCount = positiveWords.filter(word => lowerQuestion.includes(word)).length;
    const negativeCount = negativeWords.filter(word => lowerQuestion.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  /**
   * Gera tags sugeridas para uma pergunta
   */
  generateSuggestedTags(question: string): string[] {
    const tagMap: { [key: string]: string[] } = {
      'sa√∫de': ['sa√∫de', 'respirat√≥rio', 'pulm√£o', 'asma'],
      'queimadas': ['queimadas', 'fogo', 'inc√™ndio', 'fuma√ßa'],
      'polui√ß√£o': ['polui√ß√£o', 'poluente', 'contamina√ß√£o'],
      'AQI': ['AQI', '√≠ndice', 'qualidade do ar'],
      'preven√ß√£o': ['preven√ß√£o', 'prote√ß√£o', 'cuidado'],
      'Mato Grosso': ['Mato Grosso', 'Cuiab√°', 'MT'],
      'monitoramento': ['monitoramento', 'dados', 'medi√ß√£o']
    };
    
    const lowerQuestion = question.toLowerCase();
    const suggestedTags: string[] = [];
    
    Object.keys(tagMap).forEach(key => {
      if (lowerQuestion.includes(key)) {
        suggestedTags.push(...tagMap[key]);
      }
    });
    
    return [...new Set(suggestedTags)].slice(0, 5);
  }
}

// Inst√¢ncia padr√£o usando configura√ß√µes de ambiente
const geminiAIService = new GeminiAIService({
  apiKey: config.google.geminiApiKey,
  model: config.google.geminiModel
});

export default geminiAIService;
export { GeminiAIService };
